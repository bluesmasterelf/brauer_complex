$include <X_q.maple> ;

$include <r1.maple> ;
$include <r2.maple> ;
$include <t1.maple> ;
$include <t2.maple> ;
$include <s2.maple> ;
$include <s1.maple> ;

#$include <tori.maple> ;
$include <characterfamilies.maple> ;
#$include <weighttwister.maple> ;

interface(rtablesize=infinity):

que := 8;     #eight is essentially the only reasonable value, though we may run 16 to check things

#nrchars := (que+1) * (que^2+que+4);
#nrBrchars := que^3;

nrchars :=3;
nrBrchars :=3;     #for testing purposes

DM := Matrix(nrchars, nrBrchars):

X_q := calculate_X_q(que):

r1, r1_lookup_table := calculate_r1(que):
r2, r2_lookup_table := calculate_r2(que):
t1, t1_lookup_table := calculate_t1(que):
t2, t2_lookup_table := calculate_t2(que):
s2, s2_lookup_table := calculate_s2(que):
s1, s1_lookup_table := calculate_s1(que):

#r1;
#r1_lookup_table;
#r1_lookup_table[22];

#r2;
#r2_lookup_table;
#r2_lookup_table[22];

t1;
t1_lookup_table;
t1_lookup_table[5];

#t2;
#t2_lookup_table;
#t2_lookup_table[5];

#s2;
#s2_lookup_table;
#s2_lookup_table[63];

#s1;
#s1_lookup_table;
#s1_lookup_table[63];

#X_q;

idx:= [1,1];
idx;
chi1(idx,DM,5);
DM;