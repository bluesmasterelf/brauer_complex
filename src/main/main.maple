$include <X_q.maple> ;

$include <labelmakers.maple> ;
$include <r1.maple> ;
$include <r2.maple> ;
$include <t1.maple> ;
$include <t2.maple> ;
$include <s2.maple> ;
$include <s1.maple> ;

#$include <t1test.maple> ;
#$include <weighttest.maple> ;

$include <bigiterator.maple> ;
$include <tori.maple> ;
$include <characterfamilies.maple> ;
$include <weighttwister.maple> ;
#$include <stabilizer.maple> ;

interface(rtablesize=infinity):

que := 8;     #eight is essentially the only reasonable value, though we may run 16 to check things

r1, r1_lt := calculate_r1(que):
r2, r2_lt := calculate_r2(que):
t1, t1_lt := calculate_t1(que):
t2, t2_lt := calculate_t2(que):
s2, s2_lt := calculate_s2(que):
s1, s1_lt := calculate_s1(que):

nrchars := (que+1) * (que^2+que+4);
nrBrchars := que^3;

DM := Matrix(nrchars, nrBrchars):
DMlbl := [seq (i,i=nrchars)]:


X_q := calculate_X_q(que):
bigiterator(que,DM,X_q,t1_lt,t2_lt,r1_lt,r2_lt,s1_lt,s2_lt,'lbl'):

DMlbl;
DM[1];
DM[2];
DM[13];

writeto("DM.txt.");
DM;

#stabilizer(que,X_q,DM):

#DMLambdalbl, DMPhilbl := calculatelbls(X_q,que):
#DMLambdalbl;





#r1;
#r1_lookup_table;

#r2;
#r2_lookup_table;

#t1;
#t1_lookup_table;


#t2;
#t2_lookup_table;

#s2;
#s2_lookup_table;

#s1;
#s1_lookup_table;











##############################################################
#Here is a testing ground for functions. 

#test primary function decomposition

#X_q;
#bigiterator(que,DM,X_q,t1_lt,t2_lt,r1_lt,r2_lt,s1_lt,s2_lt);
#weighttwister(3,2,1,3,que,DM);
#tone(3,2,1,4,que,DM);
#chi1(column,DM,5);
#DM;

#t1_lt[0];


#below is a test for the if-else tree of various tori; in each case I wrote the if-else tree into tone in t1test.maple 
#tone(0,0,0,1,4,DM,t1_lt);
#DM;
#tone(1,0,0,1,4,DM,t1_lt);
#DM;
#tone(0,1,0,1,4,DM,t1_lt);
#DM;
#tone(0,0,1,1,4,DM,t1_lt);
#DM;
#tone(1,1,0,1,4,DM,t1_lt);
#DM;
#tone(0,1,1,1,4,DM,t1_lt);
#DM;
#tone(1,0,1,1,4,DM,t1_lt);
#DM;
#tone(1,2,0,1,4,DM,t1_lt);
#DM;
#tone(0,1,2,1,4,DM,t1_lt);
#DM;
#tone(1,0,2,1,4,DM,t1_lt);
#DM;
#tone(1,1,1,1,4,DM,t1_lt);
#DM;
#tone(1,1,2,1,4,DM,t1_lt);
#DM;
#tone(1,2,2,1,4,DM,t1_lt);
#DM;
#tone(1,2,1,1,4,DM,t1_lt);
#DM;
#tone(1,2,3,1,4,DM,t1_lt);
#DM;

#syntax for passing list by reference 
#test:= proc (L)
#       L[2]:="test"
#end proc;

#test('DMLambdalbl');
#DMLambdalbl;
