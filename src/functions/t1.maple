calculate_t1 := proc(order)

  local max_value := order - 1;
  local size := order - 2 ;

  local number_columns := 2;
  local number_rows := size / 2;

  local t1_matrix := Matrix(number_rows, number_columns);
  local t1_lookup_table := Array(1 .. max_value - 1, fill=0, datatype=integer);
  local twentyfivetriples := Matrix(1/48*(order-2)*(order-4)*(order-6),3);
  local twentyfivelt := Array(1 .. 1/48*(order-2)*(order-4)*(order-6), fill = 0, datatype=integer);

  local is_generated := Array(1 .. max_value - 1, fill=false, datatype=boolean);

  local current_number := 0;
  local current_row := 1;
  local current_size := 0;

  local column_two_value := 0;

  local row := 0;
  local column := 0;

  while not (current_size = size)  do

	 current_number := current_number + 1;

  	 if is_generated[current_number] then
		next;
	 end if; 

	 t1_matrix[current_row, 1] := current_number;
  	 is_generated[current_number] := true;

	 column_two_value := (-current_number) mod max_value;
	 t1_matrix[current_row, 2] := column_two_value;
  	 is_generated[column_two_value] := true;

	 current_row := current_row + 1;
	 current_size := current_size + 2;

  end do; 

  for row from 1 to number_rows do

      for column from 1 to 2 do

            t1_lookup_table[t1_matrix[row, column]] := t1_matrix[row, 1];

      end do;

  end do;

for i from 1 to number_rows-2 do
    for j from i+1 to number_rows-1 do
    	for k from j+1 to number_rows do
	    twentyfivetriples[number_rows^2*(i-1)+number_rows*(j-2)+k-3+1,1]:=i;
	    twentyfivetriples[number_rows^2*(i-1)+number_rows*(j-2)+k-3+1,2]:=j;
	    twentyfivetriples[number_rows^2*(i-1)+number_rows*(j-2)+k-3+1,3]:=k;
	 end do;
    end do;
end do;

for row from 1 to 1/48*(order-2)*(order-4)*(order-6)  do

      for column from 1 to 3 do

            twentyfivelt[twentyfivetriples[row, column]] := row;

      end do;

  end do;

return  t1_matrix, t1_lookup_table, twentyfivetriples, twentyfivelt;

end proc:

