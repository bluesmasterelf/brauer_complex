#this is a collection of ten functions, corresponding to tori. They should all accept order, and a twisted weight from the weight twister function

tone := proc(a,b,c,column,order,DM::Matrix,t1_lt)

#manage the parameter sets via lookuptables here
	local a1:
	local b1:
	local c1:

if a mod (order-1) = 0 then a1 := 0:
    else a1 := t1_lt[a mod (order-1)]:
    end if;
if b mod (order-1)= 0  then b1 := 0:
    else b1 := t1_lt[b mod (order-1)]:
    end if;
if c mod (order-1) = 0  then c1 := 0:
    else c1 := t1_lt[c mod (order-1)]:     #this is the simplest case of parameter management in the entire complex
    end if;

#Begin if/else tree for D-L chars

if a1=0 then
   chi11(1,column,DM);
   chi12(3,column,DM); 
   chi13(1,column,DM);
   chi14(2,column,DM);
   chi16(3,column,DM);
   chi17(3,column,DM);
   chi18(3,column,DM);
   chi19(2,column,DM);
   chi110(1,column,DM);
   chi112(1,column,DM);      #this is the result of (0,0,0), which for T_1 is equivalent to a=0. 

elif b1=0 then
     chi61(1,a1,order,column,DM);
     chi62(2,a1,order,column,DM);
     chi63(1,a1,order,column,DM);
     chi64(1,a1,order,column,DM);
     chi66(1,a1,order,column,DM);      # case (a,0,0)
    
elif c1=0 then
    if a1=b1 then
     chi11_1(1,a1,order,column,DM);
     chi11_2(1,a1,order,column,DM);
     chi113(1,a1,order,column,DM);
     chi114(1,a1,order,column,DM);  # case (a,a,0)

     else 
          chi171(1,a1,b1,order,column,DM);
	  chi172(1,a1,b1,order,column,DM);  # case (a,b,0)

	  end if; 

elif a1=c1 then
     chi81(1,a1,order,column,DM);
     chi82(2,a1,order,column,DM);
     chi83(1,a1,order,column,DM); # case (a,a,a)
    
elif b1=c1 then
     chi161(1,a1,b1,order,column,DM);
     chi162(1,a1,b1,order,column,DM);  # case (a,b,b)

elif a1=b1 then
     chi161(1,a1,c1,order,column,DM);
     chi162(1,a1,c1,order,column,DM);  # case (a,a,b)

else 
     chi251(1,a1,b1,c1,order,column,DM);     #case (a,b,c)


#else some kind of error message throw catch?

end if;

end proc;

#########################################################
#########################################################

ttwo := proc(a,b,c,column,order,DM::Matrix, t1_lt, t2_lt)

local a1:
local b1:
local c1:

if a mod (order-1)=0 then a1 := 0:
   else  a1 := t1_lt[a mod (order-1)];
   end if;
if b1 mod (order-1)=0 then b1 := 0:
   else  b1 := t1_lt[b mod (order-1)];
   end if;
if c1 mod (order+1 )=0 then c1:=0:
   else c1 := t2_lt[c mod (order+1)];
   end if;

#Here, since a,b,c have been possibly permuted, we may make use of sets to manage cases in the if-else tree, radically more complex than in T1

if a1=0 then
    if b1=0 then
   	 if c1=0 then
  	 #case 000
         else #case 00c
      end if;
   elif c1=0 then
   	#case 0b0
   elif b1=c1 then
   	#case 0bb
   else #case 0bc
   end if;
else #a1!=0 
     if b1=0 then 
     	if c1=0 then
	   #case a00
	elif a1=c1 then
	     #case a0a
	 else 
	     #case a0c
        end if;
      else if c1=0 then
      if a1=b1 then
      	       #case aa0
	  else 
	       #case ab0
    end if;
else #none are zero
     if a1=b1 then
     	if b1=c1 then
	   #case aaa
	else 
	   #case aab
	end if;
     elif a1=c1 then 
     	  #case aba
     elif b1=c1 then
     	  #case abb
     else 
     	  #case abc
     end if;
end if;



end proc;

tthree := proc(a,b,column,order,DM::Matrix)


end proc;

tfour := proc(a,b,c,column,order,DM::Matrix)


end proc;

tfive := proc(a,b,column,order,DM::Matrix)

end proc;

tsix := proc(a,b,column,order,DM::Matrix)

end proc;

tseven := proc(a,column,order,DM::Matrix)

end proc;

teight := proc(a,b,c,column,order,DM::Matrix)
       local a1:
        local b1:
        local c1:

if a mod (order+1) = 0 then a1 := 0:
    else a1 := t2_lt[a mod (order+1)]:
    end if;
if b mod (order+1)= 0  then b1 := 0:
    else b1 := t2_lt[b mod (order+1)]:
    end if;
if c mod (order+1) = 0  then c1 := 0:
    else c1 := t2_lt[c mod (order+1)]:  
    end if;

#Begin if/else tree for D-L chars
if a1=0 then
   chi11(-1,column,DM);
   chi12(1,column,DM);
   chi13(3,column,DM);
   chi15(2,column,DM);
   chi16(-3,column,DM);
   chi17(3,column,DM);
   chi18(-1,column,DM);
   chi110(-3,column,DM);
   chi111(-2,column,DM);
   chi112(1,column,DM);      #this is the result of (0,0,0), which for T_8 is equivalent to a=0.

elif b1=0 then
     chi71(1,a1,order,column,DM);
     chi73(-1,a1,order,column,DM);
     chi74(-1,a1,order,column,DM);
     chi75(-2,a1,order,column,DM);
     chi76(1,a1,order,column,DM);      # case (a,0,0)

elif c1=0 then
    if a1=b1 then
     chi131(1,a1,order,column,DM);
     chi132(-1,a1,order,column,DM);
     chi133(-1,a1,order,column,DM);
     chi134(1,a1,order,column,DM);  # case (a,a,0)

     else
          chi231(-1,a1,b1,order,column,DM);
          chi232(1,a1,b1,order,column,DM);  # case (a,b,0)

          end if; 

elif a1=c1 then
     chi91(-1,a1,order,column,DM);
     chi92(-2,a1,order,column,DM);
     chi93(1,a1,order,column,DM); # case (a,a,a)

elif b1=c1 then
     chi221(-1,a1,b1,order,column,DM);
     chi222(1,a1,b1,order,column,DM);  # case (a,b,b)

elif a1=b1 then
     chi221(-1,a1,c1,order,column,DM);
     chi222(1,a1,c1,order,column,DM);  # case (a,a,b)

else
     chi231(1,a1,b1,c1,order,column,DM);     #case (a,b,c)


end if;


end proc;

tnine := proc(a,b,column,order,DM::Matrix)

end proc;

tten := proc(a,column,order,DM::Matrix)

end proc;

