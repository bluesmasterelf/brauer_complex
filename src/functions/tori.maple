#this is a collection of ten functions, corresponding to tori. They should all accept order, a twisted weight from the weight twister function, the correct lookup tables, a column index, and the decomposition matrix

tone := proc(a,b,c,column,order,DM::Matrix,t1_lt,twentyfivelt)

#manage the parameter sets via lookuptables here
local a1 = 0:
local b1 = 0:
local c1 = 0:

if a mod (order-1) <> 0 then 
   a1 := t1_lt[a mod (order-1)]:
end if;

if b mod (order-1) <> 0 then
   b1 := t1_lt[b mod (order-1)]:
end if;

if c mod (order-1) <> 0 then 
   c1 := t1_lt[c mod (order-1)]:     #this is the simplest case of parameter management in the entire complex
end if;

#Begin if/else tree for D-L chars

if a1=0 then
   chi11(1,column,DM);
   chi12(3,column,DM); 
   chi13(1,column,DM);
   chi14(2,column,DM);
   chi16(3,column,DM);
   chi17(3,column,DM);
   chi18(3,column,DM);
   chi19(2,column,DM);
   chi110(1,column,DM);
   chi112(1,column,DM);      #this is the result of (0,0,0), which for T_1 is equivalent to a=0. 

elif b1=0 then
     chi61(1,a1,order,column,DM);
     chi62(2,a1,order,column,DM);
     chi63(1,a1,order,column,DM);
     chi64(1,a1,order,column,DM);
     chi66(1,a1,order,column,DM);      # case (a,0,0)
    
elif c1=0 then
    if a1=b1 then
     chi11_1(1,a1,order,column,DM);
     chi11_2(1,a1,order,column,DM);
     chi113(1,a1,order,column,DM);
     chi114(1,a1,order,column,DM);  # case (a,a,0)

     else 
          chi171(1,a1,b1,order,column,DM);
	  chi172(1,a1,b1,order,column,DM);  # case (a,b,0)

	  end if; 

elif a1=c1 then
     chi81(1,a1,order,column,DM);
     chi82(2,a1,order,column,DM);
     chi83(1,a1,order,column,DM); # case (a,a,a)
    
elif b1=c1 then
     chi161(1,a1,b1,order,column,DM);
     chi162(1,a1,b1,order,column,DM);  # case (a,b,b)

elif a1=b1 then
     chi161(1,a1,c1,order,column,DM);
     chi162(1,a1,c1,order,column,DM);  # case (a,a,b)

else 
     chi251(1,a1,b1,c1,order,column,DM,twentyfivelt);     #case (a,b,c)


#else some kind of error message throw catch?

end if;

end proc;

#############################################################################################################

#############################################################################################################

ttwo := proc(a,b,c,column,order,DM::Matrix, t1_lt, t2_lt)

local a1 = 0:
local b1 = 0:
local c1 = 0:

if a mod (order-1) <> 0 then
   a1 := t1_lt[a mod (order-1)];
end if;

if b1 mod (order-1) <> 0 then
   b1 := t1_lt[b mod (order-1)];
end if;

if c1 mod (order+1 ) <> 0 then
   c1 := t2_lt[c mod (order+1)];
end if;

#Here, the parameters have been permuted, which makes the if-else tree more complex. 


if a1=0 then
    if b1=0 then
   	 if c1=0 then
  	 #case 000
       	       chi11(-1,column,DM);
	       chi12(-1,column,DM);
	       chi13(1,column,DM);
	       chi14(-2,column,DM);
	       chi16(1,column,DM);
	       chi17(-1,column,DM);
	       chi18(1,column,DM);
	       chi19(2,column,DM);
	       chi110(-1,column,DM);
	       chi112(1,column,DM);
         else #case 00c
	      chi71(1,c1,order,column,DM);
	      chi72(2,c1,order,column,DM);
	      chi73(1,c1,order,column,DM);
	      chi74(1,c1,order,column,DM);
	      chi76(1,c1,order,column,DM);
      end if;
   elif c1=0 then
   	#case 0b0
	      chi61(-1,b1,order,column,DM);
	      chi63(-1,b1,order,column,DM);
	      chi64(1,b1,order,column,DM);
	      chi66(1,b1,order,column,DM);
     else #case 0bc
     	  chi201(1,b1,c1,order,column,DM);
	  chi202(1,b1,c1,order,column,DM);
   end if;
else #a1!=0 
     if b1=0 then 
     	if c1=0 then
	   #case a00
	   	 chi61(-1,a1,order,column,DM);
		 chi63(-1,a1,order,column,DM);
                 chi64(1,a1,order,column,DM);
                 chi66(1,a1,order,column,DM);
	 else 
	     #case a0c
	     	   chi201(1,a1,c1,order,column,DM);
                   chi202(1,a1,c1,order,column,DM);
        end if;
      else
       if c1=0 then
       	   if a1=b1 then
      	       #case aa0
	       	     chi11_1(-1,a1,order,column,DM);
		     chi11_2(1,a1,order,column,DM);
		     chi113(-1,a1,order,column,DM);
		     chi114(1,a1,order,column,DM);
	  else
	       	     chi171(-1,a1,b1,order,column,DM);
		     chi172(1,a1,b1,order,column,DM);
   	 end if;
else #none are zero
     if a1=b1 then
	   chi181(1,a1,c1,order,column,DM);
	   chi182(1,a1,c1,order,column,DM);
     else 
	  chi261(1,a1,b1,c1,order,column,DM);
     end if;
end if;
end if;
end if;


end proc;

#############################################################################################################

#############################################################################################################

tthree := proc(a,b,column,order,DM::Matrix,t1_lt,t2_lt,r1_lt)

#parameter management; a is the result of a+qb and is reduced mod q^2-1, b is reduced mod q-1
local a1 = 0:  #case a ain't congruent to anything
local a2 = 0: #case a congruent to q-1
local a3 = 0: #case a congruent to q+1 
local b1 = 0:

if b mod (order - 1) <> 0 then
   b1 := t1_lt[b mod (order-1)];
end if;

if a mod (order ^ 2 - 1) <> 0 then
   if a mod (order+1) = 0 then
      a3 := t1_lt[a mod (order ^ 2 - 1) / (order + 1)];
   elif a mod (order - 1)=0 then
      a2 := t2_lt[a mod (order ^ 2 - 1) / (order - 1)];
   else
      a1 := r1_lt[2,a mod (order ^ 2 - 1)];
   end if;
end if; # the various congruence if/elif

#if-else tree for character calls. Note that the same if-else from the parameter management must be a sub-tree

if a1=0 then
   if b1=0 then
      chi11(-1,column,DM);
      chi12(-1,column,DM);
      chi13(-1,column,DM);
      chi16(-1,column,DM);
      chi17(1,column,DM);
      chi18(1,column,DM);
      chi110(1,column,DM);
      chi112(1,column,DM);   #case 0,0
   else
	chi61(-1,b1,order,column,DM);
	chi63(1,b1,order,column,DM);
	chi64(-1,b1,order,column,DM);
	chi66(1,b1,order,column,DM);   #case 0,b
   end if; #cases 0,0 and 0,b
elif a3 <> 0 then         #either b is modulus, 0 or distinct
     if b1= a3 then
     	chi81(-1,b1,order,column,DM);
	chi83(1,b1,order,column,DM);
     elif b1=0 then
     	  chi11_1(-1,a3,order,column,DM);
	  chi11_2(-1,a3,order,column,DM);
	  chi113(1,a3,order,column,DM);
	  chi114(1,a3,order,column,DM);
     else
	chi161(-1,a3,b1,order,column,DM);
	chi162(1,a3,b1,order,column,DM);
     end if;    #cases aq+a
elif a2<>0 then     #b is 0 or distinct
     if b1=0 then
     	chi131(1,a2,order,column,DM);
	chi132(1,a2,order,column,DM);
	chi133(1,a2,order,column,DM);
	chi134(1,a2,order,column,DM);
     else
	chi211(1,a2,b1,order,column,DM);
	chi212(1,a2,b1,order,column,DM);
     end if;   #cases aq-a
elif b1=0 then 
     chi191(1,a1,order,column,DM,r1_lt);
     chi192(1,a1,order,column,DM,r1_lt);
else 
     chi 271(1,a1,b1,order,column,DM);
end if; #a =0



end proc;

#############################################################################################################

#############################################################################################################

tfour := proc(a,b,c,column,order,DM::Matrix,t1_lt,t2_lt)

#parameter management

local a1 = 0:
local b1 = 0:
local c1 = 0:

if a mod (order-1) <> 0 then
   a1 := t1_lt[a mod (order-1)];
end if;

if b1 mod (order-1) <> 0 then
   b1 := t2_lt[b mod (order+1)];
end if;

if c1 mod (order+1) <> 0 then
   c1 := t2_lt[c mod (order+1)];
end if;

#if else tree for character calls
if a1=0 then
   if b1=0 then
      if c1=0 then
        chi11(1,column,DM);
        chi12(1,column,DM);
        chi13(-1,column,DM);
        chi15(-2,column,DM);
        chi16(-1,column,DM);
        chi17(-1,column,DM);
        chi18(1,column,DM);
        chi110(-1,column,DM);
        chi111(-2,column,DM);
        chi112(1,column,DM);        	 #case 000
      else 
      	chi71(-1,c1,order,column,DM);
	chi72(-1,c1,order,column,DM);
	chi73(1,c1,order,column,DM);
	chi74(1,c1,order,column,DM);   #case 00c
       end if; 
   elif c1=0 then
      	chi71(-1,b1,order,column,DM);
	chi72(-1,b1,order,column,DM);
	chi73(1,b1,order,column,DM);
	chi74(1,b1,order,column,DM);    #case 00c again
   elif b1=c1 then
   	chi131(-1,b1,order,column,DM);
	chi132(1,b1,order,column,DM);
	chi133(-1,b1,order,column,DM);
	chi134(1,b1,order,column,DM);   	#case 0aa
   else 
   	chi231(1,c1,b1,order,column,DM);
	chi232(1,c1,b1,order,column,DM);   	#case 0ab
   end if;    
elif b1=0 then
     if c1=0 then 
	chi61(1,a1,order,column,DM);
	chi63(-1,a1,order,column,DM);
	chi64(-1,a1,order,column,DM);
	chi65(-2,a1,order,column,DM);
	chi66(1,a1,order,column,DM);       	#case a00
     else 
     	chi201(-1,a1,c1,order,column,DM);
	chi202(1,a1,c1,order,column,DM);     	  #case a0c
     end if;
elif c1=0 then 
     	chi201(-1,a1,b1,order,column,DM);
	chi202(1,a1,b1,order,column,DM);    #case a0c again
elif b1=c1 then
     	 chi211(-1,b1,a1,order,column,DM);
	 chi212(1,b1,a1,order,column,DM);     	   #case abb
else 
	chi281(1,a1,b1,c1,order,column,DM);	#case abc
end if;

end proc;

#############################################################################################################

#############################################################################################################

tfive := proc(a,b,column,order,DM::Matrix)

#parameter management; a is the result of a+-qb and is reduced mod q^2-1, b is reduced mod q+1
local a1 = 0: #case a ain't congruent to anything
local a2 = 0: #case a congruent to q-1
local a3 = 0: #case a congruent to q+1 
local b1 = 0:

if b mod (order + 1) <> 0 then
   b1:= t2_lt[b mod (order-1)];
end if;

if a mod (order ^ 2 - 1) <> 0 then
   if a mod (order+1) = 0 then
      a3 := t1_lt[a mod (order ^ 2 - 1) / (order + 1)];
   elif a mod (order - 1) = 0 then
      a2 := t2_lt[a mod (order ^ 2 - 1) / (order - 1)];
   else
      a1 := r1_lt[2,a mod (order ^ 2 - 1)];
   end if;
end if; # the various congruence if/elif
#if else tree for character calls

if a1=0 then
   if b1=0 then
      chi11(1,column,DM);
      chi12(-1,column,DM);
      chi13(-1,column,DM);
      chi16(1,column,DM);
      chi17(1,column,DM);
      chi18(-1,column,DM);
      chi110(-1,column,DM);
      chi112(1,column,DM);   #case 0,0
   else
	chi71(-1,b1,order,column,DM);
	chi73(1,b1,order,column,DM);
	chi74(-1,b1,order,column,DM);
	chi76(1,b1,order,column,DM);   #case 0,b
   end if; #cases 0,0 and 0,b
elif a3 <> 0 then         #either b is modulus, 0 or distinct
    if b1=0 then
     	  chi11_1(-1,a3,order,column,DM);
	  chi11_2(-1,a3,order,column,DM);
	  chi113(1,a3,order,column,DM);
	  chi114(1,a3,order,column,DM);
     else
	chi181(-1,a3,b1,order,column,DM);
	chi182(1,a3,b1,order,column,DM);
     end if;    #cases aq+a
elif a2<>0 then     #b is 0 or distinct
     if b1= a2 then
     	chi91(-1,b1,order,column,DM);
	chi93(1,b1,order,column,DM);
     elif b1=0 then
     	chi11_1(1,a2,order,column,DM);
	chi11_2(-1,a2,order,column,DM);
	chi113(-1,a2,order,column,DM);
	chi114(1,a2,order,column,DM);
     else
	chi221(1,a2,b1,order,column,DM);
	chi222(1,a2,b1,order,column,DM);
     end if;   #cases aq-a
elif b1=0 then 
     chi191(-1,a1,order,column,DM,r1_lt);
     chi192(1,a1,order,column,DM,r1_lt);
else 
     chi 291(1,a1,b1,order,column,DM);
end if; #a =0

end proc;

#############################################################################################################

#############################################################################################################

tsix := proc(a,b,column,order,DM::Matrix,r2_lt,t1_lt)

#parameter management made easy by virtue of few cases. a is the result of a+-qb and is reduced mod q^2+1, b is reduced mod q-1
local a1 = 0:
local b1 = 0:

if a mod (order^2 +1) <> 0 then 
   a1:=r2_lt[2,a mod (order ^ 2 + 1)];
end if;

if b mod (order - 1) <> 0 then 
   b1:= t1_lt[b mod (order -1)];
end if;


#if else tree for character calls

if a1= 0 then
   if b1 = 0 then 
       chi11(1,column,DM);
       chi14(1,column,DM);
       chi15(1,column,DM);
       chi16(-1,column,DM);
       chi17(-1,column,DM);
       chi19(1,column,DM);
       chi111(1,column,DM);
       chi112(1,column,DM);         #case 00
   else 
   	chi241(1,b1,order,column,DM,r2_lt);
	chi242(1,b1,order,column,DM,r2_lt);#case 0b
   end if;
elif b1=0 then
	chi61(1,a1,order,column,DM);
	chi62(-1,a1,order,column,DM);
	chi65(1,a1,order,column,DM);
	chi66(1,a1,order,column,DM);       	#case a00
       #case a0
else
	chi301(1,a1,b1,order,column,DM);#case ab
end if;

end proc;

#############################################################################################################

#############################################################################################################

tseven := proc(a,column,order,DM::Matrix,s1_lt,t1_lt)
#parameter management

local a1 = 0:   #a is congruent to a zero divisor
local a2 = 0:   #a is not congruent to anything

if a mod (order ^ 3 - 1) = 0 then
   chi11(1,column,DM);
   chi13(1,column,DM);
   chi14(-1,column,DM);
   chi19(-1,column,DM);
   chi110(1,column,DM);
   chi112(1,column,DM);
elif a mod (order ^ 2 + order + 1) = 0 then
    a1 := t1_lt[a mod (order ^ 3 - 1)  / (order ^ 2 + order + 1)];
    chi81(1,a1, order,column,DM);
    chi82(-1,a1,order,column,DM);
    chi83(1,a1,order,column,DM);
else
    a2 := s1_lt[2,a mod	(order ^ 3 - 1)];
    chi311(1,a2,order,column,DM,s1_lt);
end if;

end proc;

#############################################################################################################

#############################################################################################################

teight := proc(a,b,c,column,order,DM::Matrix,t2_lt)

local a1 = 0:
local b1 = 0:
local c1 = 0:

if a mod (order+1) <> 0 then
    a1 := t2_lt[a mod (order+1)]:
end if;

if b mod (order+1) <> 0 then
    b1 := t2_lt[b mod (order+1)]:
end if;

if c mod (order+1) <> 0 then
   c1 := t2_lt[c mod (order+1)]:  
end if;

#Begin if/else tree for D-L chars
if a1=0 then
   chi11(-1,column,DM);
   chi12(1,column,DM);
   chi13(3,column,DM);
   chi15(2,column,DM);
   chi16(-3,column,DM);
   chi17(3,column,DM);
   chi18(-1,column,DM);
   chi110(-3,column,DM);
   chi111(-2,column,DM);
   chi112(1,column,DM);      #this is the result of (0,0,0), which for T_8 is equivalent to a=0.

elif b1=0 then
     chi71(1,a1,order,column,DM);
     chi73(-1,a1,order,column,DM);
     chi74(-1,a1,order,column,DM);
     chi75(-2,a1,order,column,DM);
     chi76(1,a1,order,column,DM);      # case (a,0,0)

elif c1=0 then
    if a1=b1 then
     chi131(1,a1,order,column,DM);
     chi132(-1,a1,order,column,DM);
     chi133(-1,a1,order,column,DM);
     chi134(1,a1,order,column,DM);  # case (a,a,0)

     else
          chi231(-1,a1,b1,order,column,DM);
          chi232(1,a1,b1,order,column,DM);  # case (a,b,0)

          end if; 

elif a1=c1 then
     chi91(-1,a1,order,column,DM);
     chi92(-2,a1,order,column,DM);
     chi93(1,a1,order,column,DM); # case (a,a,a)

elif b1=c1 then
     chi221(-1,a1,b1,order,column,DM);
     chi222(1,a1,b1,order,column,DM);  # case (a,b,b)

elif a1=b1 then
     chi221(-1,a1,c1,order,column,DM);
     chi222(1,a1,c1,order,column,DM);  # case (a,a,b)

else
     chi231(1,a1,b1,c1,order,column,DM);     #case (a,b,c)
end if;


end proc;

#############################################################################################################

#############################################################################################################

tnine := proc(a,b,column,order,DM::Matrix,r2_lt,t2_lt)

#parameter management made easy by virtue of few cases. a is the result of a+-qb and is reduced mod q^2+1, b is reduced mod q+1
local a1 = 0:
local b1 = 0:

if a mod (order^2 +1) <> 0 then 
    a1 := r2_lt[2,a mod (order ^ 2 + 1)];
end if;

if b mod (order + 1) <> 0 then 
    b1 := t2_lt[b mod (order +1)];
end if;


#if else tree for character calls

if a1= 0 then
   if b1 = 0 then 
       chi11(-1,column,DM);
       chi14(1,column,DM);
       chi15(1,column,DM);
       chi16(1,column,DM);
       chi17(-1,column,DM);
       chi19(-1,column,DM);
       chi111(-1,column,DM);
       chi112(1,column,DM);         #case 00
   else 
   	chi71(1,b1,order,column,DM);
	chi72(-1,b1,order,column,DM);
	chi75(1,b1,order,column,DM);
	chi76(1,b1,order,column,DM);       	#case 0b
    end if;
elif b1=0 then
	chi241(-1,a1,order,column,DM,r2_lt);
	chi242(1,a1,order,column,DM,r2_lt);#case 0b
       #case a0
else
	chi331(1,a1,b1,order,column,DM);#case ab
end if;
end proc;

#############################################################################################################

#############################################################################################################

tten := proc(a,column,order,DM::Matrix,s2_lt,t2_lt)
#parameter management
local a1 = 0:
local a2 = 0:

if a mod (order ^ 3 + 1) = 0 then
   chi11(-1,column,DM);
   chi12(1,column,DM);
   chi15(-1,column,DM);
   chi18(-1,column,DM);
   chi111(1,column,DM);
   chi112(1,column,DM);
elif a mod (order ^ 2 - order + 1) = 0 then 
     a1 := t2_lt[a mod (order ^ 3 + 1)  / (order ^ 2 - order + 1)]; 
     chi91(-1,a1, order,column,DM);
     chi92(1,a1,order,column,DM);
     chi93(1,a1,order,column,DM);
else
     a2 := s2_lt[a mod (order ^ 3 + 1)];
     chi341(1,a2,order,column,DM,s2_lt);
end if; #cong 0 mod zero diviser

end proc;

